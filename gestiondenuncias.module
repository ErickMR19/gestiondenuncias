<?php

/**
 * @file
 * Contains gestiondenuncias.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Datetime\DrupalDateTime;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Core\Entity\EntityInterface;

/**
 * Implements hook_help().
 */
function gestiondenuncias_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the gestiondenuncias module.
    case 'help.page.gestiondenuncias':
      $output = '';
      $output .= '<h2>' . t('Acerca de') . '</h2>';
      $output .= '<p>' . t('Creado para la apliacion de la Asamblea') . '</p>';
      $output .= '<p>' . t('Provee un tipo de contenido "Denuncia" y un tipo de comentario "Asignacion entidad"') . '</p>';
      $output .= '<div><h3>' . t('Crea las siguientes rutas: ') . '</h3><table>';
      $output .= '<thead><tr>' . '<th>Ruta</th> <th> Info </th> <th>Permisos</th>' . '</tr></thead>';
      $output .= '<tr>' . '<td>denuncias/enviar_denuncia</td> <td> se utiliza para enviar denuncias de los cuatro tipos</td> <td>todos</td>' . '</tr>';
      $output .= '<tr>' . '<td>denuncias/todas</td> <td>lista todas las denuncias del sistema</td> <td>supervisores</td>' . '</tr>';
      $output .= '<tr>' . '<td>denuncias/sinasignar</td> <td>ista las denuncias del sistema sin asignar</td> <td>supervisores</tr>' . '</tr>';
      $output .= '<tr>' . '<td>denuncias/asignadas</td> <td>lista todas las denuncias asignadas al usuario actual</td> <td>gestores</td>' . '</tr>'.'</table></div>';

      return $output;

    default:
  }
}

function gestiondenuncias_schema() {
    $schema['consecutivos_denuncias'] = array(
        'fields' => array(
            'tipoDenuncia' => array( 'type' => 'varchar', 'length' => 40, ),
            'numeroActual' => array( 'type' => 'int', 'size'=>'normal','not null' => TRUE, )
        ),
        'primary key' => array('tipoDenuncia'),
    );
    return $schema;
}


/**
 * Implements hook_theme().
 */
function gestiondenuncias_theme($existing, $type, $theme, $path) {
  $theme = [];

  return $theme;
}

function gestiondenuncias_node_view( &$build, $entity, $display, $view_mode){
    if($entity->bundle() === 'denuncia'){

    }
}

function gestiondenuncias_comment_links_alter(array &$links, $entity, array &$context){
    if($entity->bundle() === 'asignacion_entidad'){
        //optiene el usuario actual
        $user = \Drupal::currentUser();
        // si el usuario es an贸nimo descarta todos los enlaces
        if( $user->isAnonymous() )
        {
            $links['comment'] = NULL;
        }
        else // si es un usuario esta autenticado, no debe mostrarse el enlace de responder
        {
            $links['comment']['#links']['comment-reply'] = NULL;
            unset($links['comment']['#links']['comment-reply']);
        }
    }
}

function gestiondenuncias_node_insert(Drupal\Core\Entity\EntityInterface $entity) {
    if($entity->bundle() === 'denuncia')
    {
        // Mensaje del correo
        $link = $entity->toLink('Ver denuncia', 'canonical',['absolute'=>TRUE] )->toString()->getGeneratedLink();
        $params['message'] = 'Nueva denuncia:<br><br>'.$entity->get('field_descripcion')->value.'<br><br>'.$link;
        $params['node_title'] = $entity->label();

        // Notifica a los supervisores
        notificarSupervisores($params);
        $correo = $entity->get('field_denunciante_email')->value;

        if( !empty($correo) ){

            $key = 'denuncia_enviada'; // Plantilla de correo
            $params['message'] = 'Denuncia:<br><br>'.$entity->get('field_descripcion')->value."<br><br>$link<br><br>Muchas gracias por su denuncia."; // Mensaje del correo
            notificarDenunciante($correo, $key, $params);
        }
    }
}

function gestiondenuncias_comment_insert(Drupal\Core\Entity\EntityInterface $entity) {
    if($entity->bundle() === 'asignacion_entidad')
    {
            // obtiene la denuncia sobre la que se realizo la asignacion_entidad para recueperar el correo o lo que sea necesario
            $denuncia = $entity->getCommentedEntity();
			$correo = $denuncia->get('field_denunciante_email')->value; // Correo del denuciante

			if( !empty( $correo ) ){
				$key = 'comentario_denuncia'; // Plantilla de correo
				$link = $denuncia->toLink('Ver respuesta', 'canonical',['absolute'=>TRUE] )->toString()->getGeneratedLink();
            	$params['message'] = 'Se realizo una gesti贸n en la denuncia enviada por usted.<br>Muchas gracias por su denuncia.<br><br>'.$link; // Mensaje del correo
            	notificarDenunciante($correo, $key, $params);
			}
    }
}

function gestiondenuncias_node_update(Drupal\Core\Entity\EntityInterface $entity) {
    if($entity->bundle() === 'denuncia')
    {
            $notificar = $entity->get('field_notificaractualizacion')->getValue()[0]['value'];
            kint($notificar);
            kint($entity);
            $nuevoUsuarioEncargado = $entity->get('field_usuario_encargado')->getValue()[0]['target_id'];
            if(!$nuevoUsuarioEncargado) $nuevoUsuarioEncargado = 0;
            kint($nuevoUsuarioEncargado);
            $id = $entity->id();
            kint($id);
            $nIDsComments = \Drupal::entityQuery('comment')
                    ->condition('comment_type', 'asignacion_entidad')
                    ->condition('entity_id', $id)
                    ->execute();
            kint($nIDsComments);
            $comentarios = \Drupal::entityManager()->getStorage('comment')->loadMultiple($nIDsComments);
            kint($comentarios);
            foreach ($comentarios as $comentario) {
                $comentario->setOwnerId($nuevoUsuarioEncargado)->set('field_notificaractualizacion','0',false)->save();
            }
    }
}

function gestiondenuncias_comment_update(Drupal\Core\Entity\EntityInterface $entity) {
    if($entity->bundle() === 'asignacion_entidad')
    {
            $notificar = $entity->get('field_notificaractualizacion')->getValue()[0]['value'];
            if($notificar == '1')
            {
                $denuncia = $entity->getCommentedEntity();
        		$correo = $denuncia->get('field_denunciante_email')->value; // Correo del denuciante

        		if( !empty( $correo ) )
                {

        			$key = 'cambio_comentario_denuncia'; // Plantilla de correo
        			global $base_url;
        			$link = '<a href='.$base_url.'/node/'.$denuncia->get('nid')->value.'#comment-'.$entity->get('cid')->value.'>Ver cambio</a>';
        			$params['message'] = 'Se realizo un cambio en la gesti贸n de la denuncia enviada por usted.<br>Muchas gracias por su denuncia.<br><br>'.$link; // Mensaje del correo
        			notificarDenunciante($correo, $key, $params);
        		}
            }
            else
            {
                \Drupal::logger('gestiondenuncias.comment_update')->debug("Actualizaci贸n comentario que no requiere notificar ");
            }
    }
}

function gestiondenuncias_cron(){
    $now = new DrupalDateTime();
    $text = $now->format('z');

    \Drupal::logger('gestiondenuncias.cron')->debug("Se va a ejecutar un cron :P $text");
    $idComments=    \Drupal::entityQueryAggregate('comment')
                    ->condition('comment_type', 'asignacion_entidad')
                    ->notExists('field_fecha_respuesta')
                    ->groupBy('entity_id')
                    ->execute();

    $ids = array_map(function ($n){ return $n['entity_id']; }, $idComments);

    $denuncias = \Drupal::entityManager()
                    ->getStorage('node')
                    ->loadMultiple($ids);
    $usersDenuncias = array();
    foreach ($denuncias as $key => $denuncia) {
        if($denuncia->get('field_usuario_encargado')->first()){
            $uid = $denuncia->get('field_usuario_encargado')->first()->getValue()['target_id'];
            $usersDenuncias[$uid][] = $denuncia->toLink(NULL, 'canonical',['absolute'=>TRUE] )->toString()->getGeneratedLink();
        }
    }
    foreach ($usersDenuncias as $user => $links) {
        $usersDenuncias[$user] = implode("<br />",$links);
    }

    notificacionSinRespuesta($usersDenuncias);
    \Drupal::logger('gestiondenuncias.cron')->debug("Se ejecuto un cron P:");

}

function gestiondenuncias_form_node_denuncia_edit_form_alter(&$form, $form_state, $form_id){
    $user = \Drupal::currentUser();
    $form['#validate'][] = 'verificar_datos_denuncia';
    $form['title'] =  null;
    $form['revision_information'] =  false;
    $form['revision']['#access'] = false;
    $form['revision_log'] =  false;
    $form['field_notificaractualizacion']['widget']['0']['value']['#type'] = 'hidden';
    if( ! $user->hasPermission('administrar supervisores')  ){

        if  (  !    (   $form['field_usuario_encargado']['widget']['target_id']['#default_value'][0]
                    && ( $form['field_usuario_encargado']['widget']['target_id']['#default_value'][0]->id() == $user->id() ) )
            )
        {
            $form = NULL;
        }
        $form['field_usuario_encargado'] = FALSE;
    }
}

function gestiondenuncias_form_comment_asignacion_entidad_form_alter(&$form, $form_state, $form_id){
    $idUser = \Drupal::currentUser()->id();
    $usuarioEncargado = $form_state->getBuildInfo()['callback_object']->getEntity()->getCommentedEntity()->get('field_usuario_encargado')->getValue()[0]['target_id'];
    $form['#validate'][] = 'verificar_datos_asignacion';
    $form['subject']['widget']['#required'] = TRUE;
    $form['subject']['widget']['0']['#required'] = TRUE;
    $form['subject']['widget']['0']['#title'] = t('Entidad Encargada');
    $form['subject']['widget']['#title'] = t('Entidad Encargada');
    $form['subject']['widget']['0']['value']['#required'] = TRUE;
    $form['subject']['widget']['0']['value']['#title'] = t('Entidad Encargada');
    $form['field_notificaractualizacion']['widget']['0']['value']['#type'] = 'hidden';
    if( ! $usuarioEncargado || $idUser != $usuarioEncargado )
    {
        $form = NULL;
    }
    else if( ! isset( $form['subject']['widget']['0']['value']['#default_value'] ) ){ // edicion de comment
        $form['field_fecha_respuesta'] = NULL;
    }
}

function verificar_datos_asignacion($form, &$form_state) {
    $form_state->setValueForElement($form['field_notificaractualizacion']['widget']['0'], array('value' => "0"));
    if( ! $form_state->hasAnyErrors() )
    {
        $values = $form_state->getValues();

        $now = new DrupalDateTime();
        $fecha_esperada = $values['field_fecha_esperada'][0]['value'];

        if( $values['field_fecha_respuesta'] && $values['field_fecha_respuesta'][0]['value'] )
        {
            $fecha_respuesta = $values['field_fecha_respuesta'][0]['value'];
            if( $fecha_esperada > $fecha_respuesta ){
                $form_state->setErrorByName('field_fecha_respuesta', 'La fecha de respuesta no puede ser anterior a la esperada');
            }
        }
        if( $fecha_esperada <= $now ){
            $form_state->setErrorByName('field_fecha_esperada', 'La fecha esperada debe ser posterior al d铆a actual');
        }
        if( $form['field_fecha_respuesta'] && ! $form_state->hasAnyErrors() )
        {
            $cambios = false;
            $a = $form['field_comentarios']['widget'][0]['value']['#default_value'];
            $b = $values['field_comentarios'][0]['value'];
            $cambios = $cambios || $a != $b;
            $a = $form['field_fecha_esperada']['widget'][0]['value']['#default_value']->format('d-m-y');
            $b = $values['field_fecha_esperada'][0]['value']->format('d-m-y');
            $cambios = $cambios || $a != $b;
            $a = ( $form['field_fecha_respuesta']['widget'][0]['value']['#default_value'] ) ? $form['field_fecha_respuesta']['widget'][0]['value']['#default_value']->format('d-m-y') : NULL ;
            $b = $values['field_fecha_respuesta'][0]['value']->format('d-m-y');
            $cambios = $cambios || $a != $b;
            $a = $form['field_file']['widget'][0]['#default_value']['fids'];
            $b = $values['field_file'][0]['fids'];
            $cambios = $cambios || $a != $b;
            if($cambios){
                $form_state->setValueForElement($form['field_notificaractualizacion']['widget']['0'], array('value' => "1"));
            }
        }
    }
}

function verificar_datos_denuncia($form, &$form_state) {
    $form_state->setValueForElement($form['field_notificaractualizacion']['widget']['0']['value'], "0");
    if( ! $form_state->hasAnyErrors() )
    {
        $values = $form_state->getValues();

        $cambioArchivada =  ( $values['field_denuncia_archivada']['value'] xor $form['field_denuncia_archivada']['widget']['value']['#default_value'] );
        $cambioUsuario =    (   ( $form['field_usuario_encargado']['widget']['target_id']['#default_value'][0] ) && ( $values['field_usuario_encargado']['target_id'][0]['target_id'] != $form['field_usuario_encargado']['widget']['target_id']['#default_value'][0]->id() ) )
                            ||  ( ! $form['field_usuario_encargado']['widget']['target_id']['#default_value'][0] && $values['field_usuario_encargado']['target_id'][0]['target_id']);
        if($cambioUsuario){
            $form_state->setValueForElement($form['field_notificaractualizacion']['widget']['0']['value'], "2");
        }
        else if ($cambioArchivada){
            $form_state->setValueForElement($form['field_notificaractualizacion']['widget']['0']['value'], "1");
        }
        else{
            $form_state->setValueForElement($form['field_notificaractualizacion']['widget']['0']['value'], "0");
        }

    }
}

// Notifica a todos los supervisores cuando se agrega una nueva denuncia
function notificarSupervisores($params){
	$mailManager = \Drupal::service('plugin.manager.mail');
	$module = 'gestiondenuncias';
	$key = 'nueva_denuncia_recibida';
	$langcode = \Drupal::currentUser()->getPreferredLangcode();
	$send = true;

	$uids = \Drupal::entityQuery('user')->execute(); // Devuelve los id's de todos los usuarios
	$users = \Drupal::entityManager()->getStorage('user')->loadMultiple($uids); // Carga todos los usuarios
	$emails = array();

	//Envia el correo a todos los usuarios
	foreach ($users as $user) {
		// Si el usuario es un supervisor de gestores
		if( $user->hasPermission('administrar supervisores') ){
			$emails[] = $user->get('mail')->value; // Obtiene la direcci贸n de correo
		}
	}

	$to = implode(",",$emails);
	$result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send); // Envia el correo

	if ( ! $result['result']) {
		$message = t('Ocurri贸 un problema enviando una notificaci贸n a los correos @email', array('@email' => $to));
		drupal_set_message($message, 'error');
		\Drupal::logger('gestiondenuncias')->error($message);
		return;
	}

	$message = t('Se ha enviado una notificaci贸n a los correos @email por la creaci贸n de una denuncia.', array('@email' => $to));
	\Drupal::logger('gestiondenuncias')->notice($message);
}




// Notifica al denunciante
function notificarDenunciante($to, $key, $params){

	$mailManager = \Drupal::service('plugin.manager.mail');

	$module = 'gestiondenuncias';
	$langcode = \Drupal::currentUser()->getPreferredLangcode();
	$send = true;

	$result = $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send); // Envia el correo

	if ( ! $result['result']) {
		$message = t('Ocurri贸 un problema enviando una notificaci贸n a @email', array('@email' => $to));
		drupal_set_message($message, 'error');
		\Drupal::logger('gestiondenuncias')->error($message);
		return;
	}

	$message = t('Se ha enviado una notificaci贸n a @email', array('@email' => $to));
	drupal_set_message($message);
	\Drupal::logger('gestiondenuncias')->notice($message);
}

// Notifica a los gestores que no recibieron respuesta
function notificacionSinRespuesta($data){
    \Drupal::logger('gestiondenuncias.cron.notificacionSinRespuesta')->debug("Inicio Funcion");
    $mailManager = \Drupal::service('plugin.manager.mail');
	$module = 'gestiondenuncias';
	$key = 'sin_respuesta_denuncia';
	$langcode = \Drupal::currentUser()->getPreferredLangcode();
	$send = true;
    $users = \Drupal::entityManager()->getStorage('user')->loadMultiple(array_keys($data));
    foreach ($data as $usuario => $denuncias) {
        $to = $users[$usuario]->get('mail')->value;
        $params['message'] = "Se esperaba respuesta en:<br /> $denuncias";
        $mailManager->mail($module, $key, $to, $langcode, $params, NULL, $send); // Envia el correo
    }
    \Drupal::logger('gestiondenuncias.cron.notificacionSinRespuesta')->debug("Fin Funcion");
}


/**
* Implements hook_mail().
*/
function gestiondenuncias_mail($key, &$message, $params) {
	$options = array(
		'langcode' => $message['langcode'],
	);
	global $base_url;
	$message['headers']['MIME-Version'] = '1.0';
	$message['headers']['Content-Type'] = 'text/html; charset=UTF-8;';

	$message['from'] = \Drupal::config('system.site')->get('mail');

	$plantilla = file_get_contents("public://templates/correo.html");
	$plantilla = str_replace('{{content}}', $params['message'], $plantilla);
	$plantilla = str_replace('{{ enlace }}', $base_url, $plantilla);

	$params['message'] = $plantilla;

	// Plantillas de correo
	switch ($key) {
		case 'nueva_denuncia_recibida':
			$message['subject'] = t('Nueva denuncia fue creada: @title', array('@title' => $params['node_title']));
			$message['body'][] = SafeMarkup::checkPlain($params['message']);
			break;

		case 'denuncia_enviada':
			$message['subject'] = t('Su denuncia fue enviada correctamente.');
			$message['body'][] = SafeMarkup::checkPlain($params['message']);
			break;

		case 'cambio_denuncia':
			$message['subject'] = t('La denuncia enviada por usted tuvo un cambio.');
			$message['body'][] = SafeMarkup::checkPlain($params['message']);
			break;

		case 'denuncia_asignada':
			$message['subject'] = t('Se le ha asignado una nueva denuncia.');
			$message['body'][] = SafeMarkup::checkPlain($params['message']);
			break;

		case 'comentario_denuncia':
			$message['subject'] = t('Se realizo una gesti贸n en la denuncia enviada por usted.');
			$message['body'][] = SafeMarkup::checkPlain($params['message']);
			break;

		case 'cambio_comentario_denuncia':
			$message['subject'] = t('Se realizo un cambio en la gesti贸n de la denuncia enviada por usted.');
			$message['body'][] = SafeMarkup::checkPlain($params['message']);
			break;

		case 'sin_respuesta_denuncia':
			$message['subject'] = t('No se recibio respuesta en alguna denuncia');
			$message['body'][] = SafeMarkup::checkPlain($params['message']);
			break;
	}
}
